<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.zero.sys.mapper.OperationLogMapper">

    <resultMap id="resultMap" type="com.zero.sys.entity.OperationLog">
        <id column="id" jdbcType="INTEGER" property="id"/>
        <result column="operation_user_id" jdbcType="INTEGER" property="operationUserId"/>
        <result column="access_time" jdbcType="TIMESTAMP" property="accessTime"/>
        <result column="ip" jdbcType="VARCHAR" property="ip"/>
        <result column="uri" jdbcType="VARCHAR" property="uri"/>
        <result column="method_type" jdbcType="VARCHAR" property="methodType"/>
        <result column="method" jdbcType="VARCHAR" property="method"/>
        <result column="request_args" jdbcType="VARCHAR" property="requestArgs"/>
        <result column="execution_time" jdbcType="BIGINT" property="executionTime"/>
        <result column="result" jdbcType="BOOLEAN" property="result"/>
        <result column="description" jdbcType="VARCHAR" property="description"/>
        <result column="exception_name" jdbcType="VARCHAR" property="exceptionName"/>
        <result column="exception_message" jdbcType="VARCHAR" property="exceptionMessage"/>
        <result column="create_time" jdbcType="TIMESTAMP" property="createTime"/>
        <result column="create_user_id" jdbcType="INTEGER" property="createUserId"/>
        <result column="update_time" jdbcType="TIMESTAMP" property="updateTime"/>
        <result column="update_user_id" jdbcType="INTEGER" property="updateUserId"/>
        <result column="deleted" jdbcType="BOOLEAN" property="deleted"/>
    </resultMap>

    <sql id="baseColumn">
        `id`,`operation_user_id`,`access_time`,`ip`,`uri`,`method_type`,`method`,`request_args`,`execution_time`,`result`,`description`,
        `exception_name`,`exception_message`,`create_time`,`create_user_id`,`update_time`,`update_user_id`,`deleted`
    </sql>

    <sql id="baseQuery">
        <if test="queryOperationLog.queryUsername != null and queryOperationLog.queryUsername != ''">
            and operation_user_id in (select id from auth_user where username like concat('%', #{queryOperationLog.queryUsername}, '%'))
        </if>
        <if test="queryOperationLog.accessTime != null">
            and access_time = #{queryOperationLog.accessTime}
        </if>
        <if test="queryOperationLog.ip != null and queryOperationLog.ip != ''">
            and ip like concat('%', #{queryOperationLog.ip}, '%')
        </if>
        <if test="queryOperationLog.uri != null and queryOperationLog.uri != ''">
            and uri like concat('%', #{queryOperationLog.uri}, '%')
        </if>
        <if test="queryOperationLog.methodType != null and queryOperationLog.methodType != ''">
            and method_type like concat('%', #{queryOperationLog.methodType}, '%')
        </if>
        <if test="queryOperationLog.method != null and queryOperationLog.method != ''">
            and method like concat('%', #{queryOperationLog.method}, '%')
        </if>
        <if test="queryOperationLog.executionTime != null">
            and execution_time = #{queryOperationLog.executionTime}
        </if>
        <if test="queryOperationLog.result != null">
            and result = #{queryOperationLog.result}
        </if>
        <if test="queryOperationLog.description != null and queryOperationLog.description != ''">
            and description like concat('%', #{queryOperationLog.description}, '%')
        </if>
        <if test="queryOperationLog.exceptionName != null and queryOperationLog.exceptionName != ''">
            and exception_name like concat('%', #{queryOperationLog.exceptionName}, '%')
        </if>
        <if test="queryOperationLog.exceptionMessage != null and queryOperationLog.exceptionMessage != ''">
            and exception_message like concat('%', #{queryOperationLog.exceptionMessage}, '%')
        </if>
        <if test="queryOperationLog.queryStartDate != null">
            and access_time &gt;= #{queryOperationLog.queryStartDate}
        </if>
        <if test="queryOperationLog.queryEndDate != null">
            and access_time &lt;= #{queryOperationLog.queryEndDate}
        </if>
    </sql>

    <select id="getPage" resultMap="resultMap">
        select `id` as id,`operation_user_id` as operation_user_id,`access_time` as access_time,`ip` as ip,`uri` as uri,`method_type` as method_type,`method` as method,
        `request_args` as request_args,`execution_time` as execution_time,`result` as result,`description` as description,`exception_name` as exception_name,`exception_message` as exception_message
        from sys_operation_log
        where deleted = 0
        <include refid="baseQuery"></include>
    </select>

    <select id="getList" resultMap="resultMap">
        select `id` as id,`operation_user_id` as operation_user_id,`access_time` as access_time,`ip` as ip,`uri` as uri,`method_type` as method_type,`method` as method,
        `execution_time` as execution_time,`result` as result,`description` as description,`exception_name` as exception_name,`exception_message` as exception_message,`create_time` as create_time
        from sys_operation_log
        where deleted = 0
        <include refid="baseQuery"></include>
    </select>

    <select id="getRecoverPage" resultMap="resultMap">
        select `id` as id,`operation_user_id` as operation_user_id,`access_time` as access_time,`ip` as ip,`uri` as uri,`method_type` as method_type,`method` as method,
        `request_args` as request_args,`execution_time` as execution_time,`result` as result,`description` as description,`exception_name` as exception_name,`exception_message` as exception_message
        from sys_operation_log
        where deleted = 1
        <include refid="baseQuery"></include>
    </select>

</mapper>